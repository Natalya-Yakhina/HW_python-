# 4. Создайте программу для игры в ""Крестики-нолики"".

# 3. Создайте программу для игры в ""Крестики-нолики"".

print("*" * 15, " ИГРА КРЕСТИКИ-НОЛИКИ ", "*" * 15)

# ===================== задаем поле ==========================================

board = list(range(1,10))

# ===================== функция вывода поля ==================================

def draw_board(board): # функция заполнения поля построчно
    print('-' * 13) 
    for i in range(3): # проход по трем строкам
        print('|', board[0 + i*3], '|', board[1 + i*3], '|', board[2 + i*3], '|') #  с каждым проходом по строкам, выводится числа по порядку по трем столбикам
        print('-' * 13) # выводит линию после каждой строки

# ===================== функция ввода данных в игру ==========================

def take_input(player_token): # функция заполнения ячеек в поле
    valid = False
    while not valid: # если нет ошибки - цикл заполняется
        player_answer = input('Куда поставим' + player_token '?') # ответ игрока: какой символ ставить "Х" или "0"
        try:
            player_answer = int(player_answer) # ответ игрока: число клетки поля, где будет поставлен символ
        except:
            print('Некорректный ввод. Вы уверены, что ввели число?') # проверка на ввод целого числа
            continue
        if player_answer >= 1 and player_answer <= 9: # проверка введенного числа на диапозон ячеек игрового поля от 1 до 9
            if(str(board[player_answer - 1]) not in 'XO'): # проверка не заполнено ли указанное поле
                board[player_answer - 1] = player_token # если нет ни "Х" или "0", то в список ставиться "Х" или "0"
                valid = True
            else:
                print('Эта клетка уже занята!') # выводит, если число верно
        else:
            print('Некорректный ввод. Введите число от 1 до 9.') # ошибка ввода

# ===================== функция проверки игрового поля ========================

def check_win(board):
    win_coord = ((0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)) # координаты выигрыша - кортеж кортежей 
    for each in win_coord: # перебор значений кортежа
        if board[each[0]] == board[each[1]] == board[each[2]]: # если все три заданные клетки с одинаковыми символами - возвращает выигрышный символ, иначе False
            return board[each[0]]
    return False

# ===================== компилятор игры =======================================

def main(board):
    counter = 0 # счетчик
    win = False 
    while not win: # пока не будет победителя
        draw_board(board) # вызов функции вывода игрового поля 
        if counter % 2 == 0: # переход хода между игроками (до 57)
            take_input('X')
        else:
            take_input('O')
        counter += 1
        if counter > 4: # если до 4 хода никто не выиграл, то проверка на выигрыш
            tmp = check_win(board) # вызов функции проверки игрового поля на выигрышные комбинации
            if tmp:
                print(tmp, 'выиграл!') 
                win = True 
                break # остановка цикла while
        if counter == 9: # если все игровые поля заполнены и победителя нет, то выводит "ничья"
            print('Ничья!')
            break
    draw_board(board)

main(board)
input("Нажмите Enter для выхода!")